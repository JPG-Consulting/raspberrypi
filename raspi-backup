#!/bin/bash
BACKUP_PATH='/root'
IMAGE_FREESPACE=64

function delete_lo()
{
    partx -d ${IMAGE_LOOP}p1
    if [ $? -ne 0 ]; then
        echo "Failed to delete loop device boot partition."
        partx -d ${IMAGE_LOOP}p2
        losetup -d ${IMAGE_LOOP}    
        exit 1
    fi
    
    partx -d ${IMAGE_LOOP}p2
    if [ $? -ne 0 ]; then
        echo "Failed to delete loop device root partition."
        losetup -d ${IMAGE_LOOP}    
        exit 1
    fi
    
    losetup -d ${IMAGE_LOOP}
    if [ $? -ne 0 ]; then
        echo "Failed to delete loop device."
        exit 1
    fi
}

function setup_lo()
{
    IMAGE_LOOP=$(losetup -f)
    if [ -z "${IMAGE_LOOP}" ]; then
        echo "Error setting up loop device."
        exit 1
    fi
    
    losetup -f $IMAGE_FILE
    if [ $? -ne 0 ]; then
        echo "Failed to create loop device."
        exit 1
    fi
    
    partx -a ${IMAGE_LOOP}
    if [ $? -ne 0 ]; then
        echo "Failed to create loop device for partitions."
        exit 1
    fi
}

function create_image()
{
    local bootfs_start=$(parted /dev/mmcblk0 -ms unit s p | grep "^1" | cut -f 2 -d:)
    if [ -z ${bootfs_start} ]; then
        echo "Unable to get boot partition start offset."
        exit 1
    fi
    
    local bootfs_end=$(parted /dev/mmcblk0 -ms unit s p | grep "^1" | cut -f 3 -d:)
    if [ -z ${bootfs_end} ]; then
        echo "Unable to get boot partition end offset."
        exit 1
    fi
    
    local rootfs_start=$(parted /dev/mmcblk0 -ms unit s p | grep "^2" | cut -f 2 -d:)
    if [ -z ${rootfs_start} ]; then
        echo "Unable to get root filesystem start offset."
        exit 1
    fi
    
    # Get sizes in MB
    local bootfs_size=`df -B MB | grep '/dev/mmcblk0p1' | awk '{print $2}' | awk -F "MB" '{print $1}'`
    if [ -z ${bootfs_size} ]; then
        echo "Unable to get boot filesystem size."
        exit 1
    fi
    
    local rootfs_size=`df -B MB | grep 'rootfs' | awk '{print $3}' | awk -F "MB" '{print $1}'`
    if [ -z ${rootfs_size} ]; then
        echo "Unable to get root filesystem size."
        exit 1
    fi

    if ! [[ ${IMAGE_FREESPACE} =~ ^[0-9]+$ ]] ; then
        echo "Freespace must be a positive numeric value" 
        exit 1
    fi

    if [ $IMAGE_FREESPACE -lt 8 ]; then
        echo "Freespace has been set to 8Mb"
        $IMAGE_FREESPACE=8
    fi
    
    local image_size=$(expr ${bootfs_size} + ${rootfs_size} + ${IMAGE_FREESPACE} )    
    
    echo "Creating image file..."
    IMAGE_FILE="${BACKUP_PATH}/rpi_backup.img"
    dd if=/dev/zero of=${IMAGE_FILE} bs=1M count=${image_size}
    if [ $? -ne 0 ]; then
        echo "Failed to create image file."
        exit 1
    fi

    parted ${IMAGE_FILE} --script -- mklabel msdos
    if [ $? -ne 0 ]; then
        echo "Failed to create disk label."
        exit 1
    fi
    
    parted ${IMAGE_FILE} --script -- mkpart primary fat32 ${bootfs_start} ${bootfs_end}
    if [ $? -ne 0 ]; then
        echo "Failed to create boot partition."
        exit 1
    fi
    
    parted ${IMAGE_FILE} --script -- mkpart primary ext4 ${rootfs_start} -1
    if [ $? -ne 0 ]; then
        echo "Failed to create root partition."
        exit 1
    fi
    
    setup_lo
    
    mkfs.vfat ${IMAGE_LOOP}p1
    if [ $? -ne 0 ]; then
        echo "Error formating boot partition."
        delete_lo
        exit 1
    fi
    
    mkfs.ext4 ${IMAGE_LOOP}p2
    if [ $? -ne 0 ]; then
        echo "Error formating root partition."
        delete_lo
        exit 1
    fi
    
    delete_lo
}

create_image
        
echo "Done."
