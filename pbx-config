#!/bin/bash

DEFAULT_TITLE='Raspberry Pi Software Configuration Tool (pbx-config)'

calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

array_contains_element () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

do_finish() {
  whiptail --yesno "Would you like to restart Asterisk now?" 20 60 2
  if [ $? -eq 0 ]; then # yes
    sync
    service asterisk restart
  fi
  exit 0
}

do_modules_menu()
{
  local module=''
  local AVAILABLE_MODULES=(
    chan_dongle "Channel driver for Huawei uMTS/3G USB modems" ON
    chan_gtalk  "Channel for Google Talk"                      ON
  )

  # Check if the module is active or not
  for ((i=0; i<${#AVAILABLE_MODULES[@]}; i+=3)); do
    module=${AVAILABLE_MODULES[$i]}
    grep -q -e "^noload => ${module}.so" /etc/asterisk/modules.conf && AVAILABLE_MODULES[$(expr $i + 2)]=OFF
  done

  MODULES=$(whiptail --title "${DEFAULT_TITLE}" --checklist \
    "Select the asterisk modules you wish to load" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
    "${AVAILABLE_MODULES[@]}" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    MODULES=($(echo ${MODULES} | tr -d '"'))
    
    for ((i=0; i<${#AVAILABLE_MODULES[@]}; i+=3)); do
      module=${AVAILABLE_MODULES[$i]}
      active_module=0
      
      for e in "${MODULES[@]}"
      do
        if [[ "$module" == "$e" ]]; then
          active_module=1
          break;
        fi
      done
      
      if [ ${active_module} -eq 1 ]; then
        sed -e "s|^noload => ${module}.so|load => ${module}.so|" -i /etc/asterisk/modules.conf
        grep -q -e "^load => ${module}.so" /etc/asterisk/modules.conf || echo "load => ${module}.so" >> /etc/asterisk/modules.conf
      else
        sed -e "s|^load => ${module}.so|noload => ${module}.so|" -i /etc/asterisk/modules.conf
        grep -q -e "^noload => ${module}.so" /etc/asterisk/modules.conf || echo "noload => ${module}.so" >> /etc/asterisk/modules.conf
      fi
    done
    
    # Post module configuration
    for module in "${MODULES[@]}"; do
      case "${module}" in
        chan_dongle) do_chan_dongle_menu ;;
      esac
    done
  fi
}

do_chan_dongle_menu()
{
  whiptail --msgbox "chan_dongle setup" 20 60 1
}

#
# Interactive use loop
#
calc_wt_size
while true; do
  FUN=$(whiptail --title "${DEFAULT_TITLE}" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Module Options" "Configure Asterisk modules" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_modules_menu ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
