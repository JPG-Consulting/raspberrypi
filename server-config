#!/bin/bash
#============================================================#
# Bash script used to configure a server for the first time  #
#============================================================#

ASK_TO_REBOOT=0

calc_wt_size() {
    # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
    # output from tput. However in this case, tput detects neither stdout or 
    # stderr is a tty and so only gives default 80, 24 values
    WT_HEIGHT=17
    WT_WIDTH=$(tput cols)

    if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
        WT_WIDTH=80
    fi
    
    if [ "$WT_WIDTH" -gt 178 ]; then
        WT_WIDTH=120
    fi
    
    WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_change_locale() {
    dpkg-reconfigure locales
}

do_change_timezone() {
    dpkg-reconfigure tzdata
}

do_configure_keyboard() {
  dpkg-reconfigure keyboard-configuration &&
  printf "Reloading keymap. This may take a short while\n" &&
  invoke-rc.d keyboard-setup start
}

do_change_hostname() {
    whiptail --msgbox "\
        Please note: RFCs mandate that a hostname's labels \
        may contain only the ASCII letters 'a' through 'z' (case-insensitive), 
        the digits '0' through '9', and the hyphen.
        Hostname labels cannot begin or end with a hyphen. 
        No other symbols, punctuation characters, or blank spaces are permitted.\
        " 20 70 1

    CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
    NEW_HOSTNAME=$(whiptail --inputbox "Please enter a hostname" 20 60 "$CURRENT_HOSTNAME" 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
        echo $NEW_HOSTNAME > /etc/hostname
        sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
        ASK_TO_REBOOT=1
    fi
}

disable_server_config_at_boot() {
    if [ -e /etc/profile.d/server-config.sh ]; then
        rm -f /etc/profile.d/server-config.sh
        sed -i /etc/inittab \
            -e "s/^#\(.*\)#\s*SRVCFG_TO_ENABLE\s*/\1/" \
            -e "/#\s*SRVCFG_TO_DISABLE/d"
        telinit q
    fi
}

do_finish() {
    disable_server_config_at_boot
    if [ $ASK_TO_REBOOT -eq 1 ]; then
        whiptail --yesno "Would you like to reboot now?" 20 60 2
        if [ $? -eq 0 ]; then # yes
            sync
            reboot
        fi
    fi
    exit 0
}

do_internationalisation_menu() {
    FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Internationalisation Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "I1 Change Locale" "Set up language and regional settings to match your location" \
        "I2 Change Timezone" "Set up timezone to match your location" \
        "I3 Change Keyboard Layout" "Set the keyboard layout to match your keyboard" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            I1\ *) do_change_locale ;;
            I2\ *) do_change_timezone ;;
            I3\ *) do_configure_keyboard ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

#
# Interactive use loop
#
calc_wt_size
while true; do
    FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
        "1 Expand Filesystem" "Ensures that all of the SD card storage is available to the OS" \
        "2 Change User Password" "Change password for the default user (pi)" \
        "3 Enable Boot to Desktop/Scratch" "Choose whether to boot into a desktop environment, Scratch, or the command-line" \
        "4 Internationalisation Options" "Set up language and regional settings to match your location" \
        "5 Enable Camera" "Enable this Pi to work with the Raspberry Pi Camera" \
        "6 Add to Rastrack" "Add this Pi to the online Raspberry Pi Map (Rastrack)" \
        "7 Overclock" "Configure overclocking for your Pi" \
        "8 Advanced Options" "Configure advanced settings" \
        "9 About raspi-config" "Information about this configuration tool" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        do_finish
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1\ *) do_expand_rootfs ;;
            2\ *) do_change_pass ;;
            3\ *) do_boot_behaviour ;;
            4\ *) do_internationalisation_menu ;;
            5\ *) do_camera ;;
            6\ *) do_rastrack ;;
            7\ *) do_overclock ;;
            8\ *) do_advanced_menu ;;
            9\ *) do_about ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    else
        exit 1
    fi
done
